# -*- coding: utf-8 -*-

import simple_draw as sd


# Часть 1.
# Написать функции рисования равносторонних геометрических фигур:
# - треугольника
# - квадрата
# - пятиугольника
# - шестиугольника
# Все функции должны принимать 3 параметра:
# - точка начала рисования
# - угол наклона
# - длина стороны
#
# Использование копи-пасты - обязательно! Даже тем кто уже знает про её пагубность. Для тренировки.
# Как работает копипаста:
#   - одну функцию написали,
#   - копипастим её, меняем название, чуть подправляем код,
#   - копипастим её, меняем название, чуть подправляем код,
#   - и так далее.
# В итоге должен получиться ПОЧТИ одинаковый код в каждой функции

# Пригодятся функции
# sd.get_point()
# sd.get_vector()
# sd.line()
# Результат решения см lesson_004/results/exercise_01_shapes.jpg


def draw_figure(point, angle=0, long=200, peaks=3):
    step = round(360 / peaks, 0)
    last_point = point
    last_peaks = peaks - 1
    for i in range(0, peaks):
        new_angle = step * i + angle
        if i == last_peaks:
            sd.line(last_point, point, width=3)
        else:
            vector = sd.get_vector(start_point=last_point, angle=new_angle, length=long, width=3)
            vector.draw()
            last_point = vector.end_point


def draw_triangle(point, angle=0, long=200):
    draw_figure(point, angle, long, 3)


def draw_square(point, angle=0, long=200):
    draw_figure(point, angle, long, 4)


def draw_pentagon(point, angle=0, long=200):
    draw_figure(point, angle, long, 5)


def draw_hexagon(point, angle=0, long=200):
    draw_figure(point, angle, long, 6)


draw_triangle(sd.get_point(40, 20), 15, 100)
draw_square(sd.get_point(240, 20), 45, 100)
draw_pentagon(sd.get_point(40, 220), 60, 100)
draw_hexagon(sd.get_point(240, 220), 100, 100)
# Часть 1-бис.
# Попробуйте прикинуть обьем работы, если нужно будет внести изменения в этот код.
# Скажем, связывать точки не линиями, а дугами. Или двойными линиями. Или рисовать круги в угловых точках. Или...
# А если таких функций не 4, а 44?

# Часть 2 (делается после зачета первой части)
#
# Надо сформировать функцию, параметризированную в местах где была "небольшая правка".
# Это называется "Выделить общую часть алгоритма в отдельную функцию"
# Потом надо изменить функции рисования конкретных фигур - вызывать общую функцию вместо "почти" одинакового кода.
#
# В итоге должно получиться:
#   - одна общая функция со множеством параметров,
#   - все функции отрисовки треугольника/квадрата/етс берут 3 параметра и внутри себя ВЫЗЫВАЮТ общую функцию.
#
# Не забудте в этой общей функции придумать, как устранить разрыв
#   в начальной/конечной точках рисуемой фигуры (если он есть)

# Часть 2-бис.
# А теперь - сколько надо работы что бы внести изменения в код? Выгода на лицо :)
# Поэтому среди программистов есть принцип D.R.Y. https://clck.ru/GEsA9
# Будьте ленивыми, не используйте копи-пасту!


sd.pause()

# зачет!
